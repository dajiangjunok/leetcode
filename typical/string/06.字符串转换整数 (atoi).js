// 题：
/**
 * 字符串转换整数 (atoi)
 * 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
 * 函数 myAtoi(string s) 的算法如下：
 * 读入字符串并丢弃无用的前导空格
 * 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
 * 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
 * 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
 * 如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
 * 返回整数作为最终结果。
 **/
/**
 * @param {string} s
 * @return {number}
 */
 var myAtoi = function (s) {
  let res = 0,
    // 正负号，默认正号
    negativeSymbol = 1;
  // 把首尾的空格都去掉
  s = s.trim();
  for (let i = 0; i < s.length; i++) {
    // 负数
    if (i == 0 && s[i] == "-") {
      negativeSymbol = -1;
      continue;
      // 正数
    } else if (i == 0 && s[i] == "+") continue;
    // 因为空格会被转成0，所以要排除空格的情况，也就是说在数字范围内就加上
    if (s[i] >= 0 && s[i] <= 9 && s[i] != " ") {
      res = res * 10 + (s[i] - 0);
      // 为什么在这里就判断呢，因为这里如果就溢出的话，就直接跳出，不需要再后面无意义的计算了
      if (res * negativeSymbol <= -2147483648) return -2147483648;
      else if (res * negativeSymbol >= 2147483647) return 2147483647;
    } else break;
  }
  return res * negativeSymbol;
};



 